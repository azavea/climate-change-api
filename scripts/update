#!/bin/bash

set -e

if [[ -n "${CC_DEBUG}" ]]; then
    set -x
fi

function usage() {
    echo -n \
"Usage: $(basename "$0")

Pull and build container images using docker-compose

Loads database backup from S3

See the Getting Data section of the README for importing additional data.

"
}
DIR="$(dirname "$0")"
CC_DB_BACKUP_BUCKET="${CC_DB_BACKUP_BUCKET:-development-climate-backups-us-east-1}"

function check_database() {
    # Check if database is set up to continue

    max=21 # 1 minute
    counter=1
    while true
    do
        echo "Checking if database is up yet (try ${counter})..."
        set +e
        docker-compose \
            exec -T postgres gosu postgres \
            psql -d climate -c 'select 1' &>/dev/null
        status_check=$?
        if [ $status_check == 0 ]
        then
            echo "Connected to database successfully"
            break
        fi
        set -e
        if [[ ${counter} == "${max}" ]]
        then
            echo "Could not connect to database after some time"
            exit 1
        fi
        sleep 3
        (( counter++ ))
    done
}

if [ "${BASH_SOURCE[0]}" = "${0}" ]
then
    if [ "${1:-}" = "--help" ]
    then
        usage
    else
        docker-compose build

        aws s3 sync "s3://${CC_DB_BACKUP_BUCKET}/db/latest/" \
          "${DIR}/../database_backup/"

        docker-compose up -d postgres

        check_database

        set +e
        docker-compose run --rm --entrypoint ./manage.py django check_development_database
        LOAD_BACKUP=$?

        if [[ $LOAD_BACKUP -eq 1 ]] || [ "${1:-}" = "--force" ]
        then
            echo "Loading database backup"
            docker-compose exec -T postgres \
                pg_restore -j 2 -v -c -d climate -U climate \
                /opt/database_backup/cc_dev_db.dump
        fi
        set -e


        docker-compose run --rm --entrypoint ./manage.py django migrate
    fi
    exit
fi